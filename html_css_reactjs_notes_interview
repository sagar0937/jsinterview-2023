/* If screen size is 600px wide, or less, set the font-size of <div> to 30px */
@media screen and (max-width: 600px) {
  div.example {
    font-size: 30px;}}
/* On screens that are 600px or less, set the background color to olive */
@media screen and (max-width: 600px) {
  body {
    background-color: olive; }}
/* On screens that are 600px wide or less, make the columns stack on top of each other instead of next to each other */
@media screen and (max-width: 600px) {
  .row {
    flex-direction: column;}}

The CSS box-sizing property allows us to include the padding and border in an element's total width and height.If you set box-sizing: border-box; on an element, padding and border are included in the width and height:
.div1 {
  width: 300px;
  height: 100px;
  border: 1px solid blue;
  box-sizing: border-box;
}

What is Specificity?
Inline style<h1 style="color: pink;">-- Highest priority, directly applied with the style attribute
Id selectors#navbarSecond highest priority, identified by the unique id attribute of an element
Classes and pseudo-classes.test, :hoverThird highest priority, targeted using class names
Attributes[type="text"]Low priority, applies to attributes
Elements and pseudo-elementsh1, ::before, ::afterLowest priority, applies to HTML elements and pseudo-elements
The !important rule in CSS is used to add more importance to a property/value than normal.
#myid {
  background-color: blue;}.myclass { background-color: gray;}
p {background-color: red !important;}
"box model" 
Explanation of the different parts:
Content - The content of the box, where text and images appear
Padding - Clears an area around the content. The padding is transparent
Border - A border that goes around the padding and content
Margin - Clears an area outside the border. The margin is transparent
Important: When you set the width and height properties of an element with CSS, you just set the width and height of the content area. To calculate the total width and height of an element, you must also include the padding and borders.
This <div> element will have a total width of 350px and a total height of 80px: 
div {
  width: 320px;
  height: 50px;
  padding: 10px;
  border: 5px solid gray;
  margin: 0;
}
 320px (width of content area)
+ 20px (left padding + right padding)
+ 10px (left border + right border)
= 350px (total width)

  50px (height of content area)
+ 20px (top padding + bottom padding)
+ 10px (top border + bottom border)
= 80px (total height)
Compared to display: inline,eg span element take padding/border
 the major difference is that display: inline-block(li element) allows to set a width and height, padding, border on the element.
Compared to display: block, the major difference is that display: inline-block does not add a line-break after the element, so the element can sit next to other elements.
/* 10. CSS Variables */
        :root {
            --primary-color: #007bff;
            --secondary-color: #6c757d;
        }

        .variable-example {
            color: var(--primary-color);
            background: var(--secondary-color);
        }
Select and style every <p> element that are direct children of a <div> element:
div > p {
  background-color: gold;
  border: 1px solid gray;
}
<div>
<h2>Donald Duck</h2>
 <p>Donald Duck lives in Duckburg.</p>
<span> 
<p>im not direct child of div so no bg color gold for me</p>
</span
</div>

div p {
  background-color: yellow;
}
Select and style all <p> elements inside <div> elements:
<div>
<h2>Donald Duck</h2>
 <p>Donald Duck lives in Duckburg.</p>
</div>
<div>
  <span><p>I will be styled even im inside span</p></span>
  <p>I will be styled.</p>
</div>

div, p Selects all <div> elements and all <p> elements
h1,h2,p  Selects all <h1>,<h2>elements and all <p> elements

h1, h2, p {
  background-color: gold;
  border: 1px solid gray;
}
<div class="flex-container"> 
<div class="centered-div"> Centered Div </div>
 </div>
<style>
 .flex-container { 
display: flex; 
justify-content: center; /* Horizontal centering */ 
align-items: center; /* Vertical centering */ 
height: 100vh; /* Full viewport height */ 
background-color: lightgrey; 
}
.centered-div {
width: 50%; text-align: center;
 background-color: lightblue; 
padding: 20px; }
<style>
//grid
<style> 
.grid-container { 
display: grid;
 place-items: center; /* Centers both horizontally and vertically */ 
height: 100vh; /* Full viewport height */
 background-color: lightgrey; 
}
//position—no need of container div
<style> 
.centered-div { 
position: absolute;
 top: 50%; /* Move down 50% from the top */
 left: 50%; /* Move right 50% from the left */ 
transform: translate(-50%, -50%); /* Offset by half of its width and height */ background-color: lightblue; text-align: center; padding: 20px; 
} 
</style>
//React
The Virtual DOM is a lightweight, in-memory representation of the real DOM. It allows efficient updates to the UI by only re-rendering parts of the DOM that have changed.
Keys in Virtual DOM

Keys help React identify which items have changed, are added, or removed during updates. They improve the efficiency of the diffing algorithm.

Why not use index as a key?
Using indexes can lead to bugs when items are reordered or removed, as it doesn't uniquely identify elements.
Diffing Algorithm
React's diffing algorithm compares the previous and new Virtual DOM to determine the minimal number of changes required. The key steps:
Compare element types: If they differ, replace the old node.
Compare attributes: Update changed attributes.
Compare children: Recursively diff child nodes
Reconciliation
Reconciliation is the process React uses to update the DOM by applying changes calculated from the diffing algorithm.
React.createElement
React.createElement is the underlying method used to create Virtual DOM elements. JSX is syntactic sugar for React.createElement.
const element = React.createElement('h1', { className: 'header' }, 'Hello, React!');
const element = <h1 className="header">Hello, React!</h1>;
JSX
JSX (JavaScript XML) is a syntax extension that allows you to write HTML-like code in JavaScript. It compiles to React.createElement.
const element = (
  <div>
    <h1>JSX Example</h1>
    <p>This is JSX in action.</p>
  </div>
);
//Compilation Output:
const element = React.createElement(
  'div',
  null,
  React.createElement('h1', null, 'JSX Example'),
  React.createElement('p', null, 'This is JSX in action.')
);
lement vs Component
Element: A plain object representing a DOM node.
Component: A reusable function or class that returns a React element.
function WelcomeMessage(props) {
  return (
    <div>
      {/* React element returned by the component */}
      <h1>Welcome, {props.name}!</h1>
    </div>
  );
}

// React element describing the usage of a component
const appElement = <WelcomeMessage name="Alice" />;
ReactDOM.render(appElement, document.getElementById('root'));
•  <WelcomeMessage /> is a React element that uses the WelcomeMessage component.
•  The component encapsulates the logic and returns React elements to describe the UI
function Greeting(props) {
  return <h1>Hello, {props.name}!</h1>;//element <h1>
}

// Usage
const element = <Greeting name="Alice" />;
•  Here, Greeting is a component, and its return value (<h1>) is a React element.
•  Components can accept props (data passed from parent).
Key Takeaways for Interviews
Virtual DOM optimizes performance by reducing direct manipulation of the real DOM.
Use keys for lists to improve efficiency; avoid using array indexes.
Diffing and Reconciliation ensure minimal DOM updates.
JSX is syntactic sugar for React.createElement.
Understand the difference between React elements and components.

setState in React is asynchronous because React batches updates for performance optimization. This means that multiple setState calls inside an event handler may be grouped into a single re-render.
React.memo is a higher-order component (HOC) that memoizes a component. It prevents re-renders if props haven’t changed.

 
function Counter() {
  const [count, setCount] = useState(0);

  const handleClick = () => {
    setCount(count + 1);
    setCount(count + 1);
    setCount(count + 1);
    console.log("Current count:", count); // Still prints 0 due to closure capturing the old state
  };

  return (
    <div>
      <p>Count: {count}</p>
      <button onClick={handleClick}>Increment</button>
    </div>
  );
}

export default Counter;
 
•  Even though setCount is called 3 times, it updates only once.
•  This happens because setState is batched inside event handlers.
Use the functional update form:
const handleClick = () => {
  setCount(prev => prev + 1);
  setCount(prev => prev + 1);
  setCount(prev => prev + 1);
};
Now, the state updates correctly by +3.
Why Not async useEffect?
Declaring useEffect(async () => {...}) causes issues with cleanup functions.
Why shouldn't you modify state directly in React?
React relies on immutability. Directly modifying the state will not trigger a re-render.

function DirectModification() {
  const [person, setPerson] = useState({ name: "Alice", age: 25 });

  const updateAgeWrong = () => {
    person.age = 26; // ❌  Direct mutation, React won't re-render
    console.log(person);
  };
console.log("Component Rendered");

•  Clicking "Wrong Add" does not update the UI.
•  The component does not re-render.

  const updateAgeCorrect = () => {
    setPerson(prev => ({ ...prev, age: 26 })); // ✅ Creates a new object
  };

  return (
    <div>
      <p>Name: {person.name}</p>
      <p>Age: {person.age}</p>
      <button onClick={updateAgeWrong}>Wrong Update</button>
      <button onClick={updateAgeCorrect}>Correct Update</button>
    </div>
  );
}
export default DirectModification;
•  Mutating state directly does not signal React that a re-render is needed.
•  Always use setState to return a new object reference.

function DeepNestedState() {
  const [user, setUser] = useState({
    name: "Alice",
    address: {
      city: "New York",
      zip: "10001",
    },
  });

  const updateCityWrong = () => {
    user.address.city = "Los Angeles"; // ❌ Mutates state
    setUser(user); // ❌ React does not detect change
  };
const updateCityCorrect = () => { setUser(prev => ({ ...prev, address: { ...prev.address, city: "Los Angeles" }, // ✅ Creates a new object })); };
  return (
    <div>
      <p>City: {user.address.city}</p>
      <button onClick={updateCityWrong}>Update City</button>
    </div>
  );
}

export default DeepNestedState;

Summary
Concept	Mistake	Fix
setState batching	Multiple calls don't update immediately	Use functional setState(prev => prev + 1)
useEffect async	Can't use async directly	Define async function inside useEffect
Closures in useEffect	Captures old state	Add state as dependency
Direct state mutation	Doesn't re-render	Use setState({ ...prev })
useEffect cleanup	Causes memory leaks	Use return () => cleanup()

Scenario	Issue	Solution
Mutating objects	React does not detect state change	Use { ...prev } to create a new object
Mutating arrays	push(), pop() do not trigger re-renders	Use [...prev] to create a new array
Updating nested objects in an array	React does not track changes inside objects	Use map() to create new objects


useEffect(() => {
  const controller = new AbortController();
  const signal = controller.signal;

  fetch(`https://jsonplaceholder.typicode.com/todos/${query}`, { signal })
    .then(res => res.json())
    .then(data => setResult(data))
    .catch(err => {
      if (err.name === "AbortError") console.log("Request aborted!");
    });

  return () => controller.abort(); // ✅ Cancels previous request
}, [query]);

import React, { useState, useMemo } from "react";

function OptimizedComponent() {
  const [count, setCount] = useState(0);

  const numbers = useMemo(() => {
    return Array.from({ length: 10000 }, (_, i) => i).map(num => {
      console.log("Rendering list item");
      return <li key={num}>{num}</li>;
    });
  }, []); // ✅ Memoized: Won't re-render on `count` change

  return (
    <div>
      <button onClick={() => setCount(count + 1)}>Increment {count}</button>
      <ul>{numbers}</ul>
    </div>
  );
}

export default OptimizedComponent;

import React from 'react';

const Child = React.memo(({ name }) => {
  console.log('Child component rendered');
  return <p>Child Component, Name: {name}</p>;
});

function Parent() {
  const [count, setCount] = React.useState(0);

  return (
    <div>
      <Child name="Alice" />
      <button onClick={() => setCount(count + 1)}>Parent Count: {count}</button>
    </div>
  );
}

export default Parent;
•  What it does: Prevents the Child component from re-rendering unless the name prop changes.
•  Why it's useful: Optimizes performance for functional components.
useMemo memoizes the result of a calculation, recomputing it only when its dependencies change.

import React, { useState, useMemo } from 'react';

function ExpensiveCalculation({ num }) {
  const factorial = useMemo(() => {
    console.log('Calculating factorial...');
    return num <= 0 ? 1 : num * factorial(num - 1);
  }, [num]);

  return <p>Factorial of {num}: {factorial}</p>;
}

export default ExpensiveCalculation;
function App() {
  const [number, setNumber] = useState(5);
  const [otherState, setOtherState] = useState(false);

  return (
    <div>
      <h1>Expensive Calculation with useMemo</h1>
      <input
        type="number"
        value={number}
        onChange={(e) => setNumber(parseInt(e.target.value) || 0)}
      />
      <ExpensiveCalculation num={number} />
      <button onClick={() => setOtherState(!otherState)}>
        Toggle Other State: {otherState.toString()}
      </button>
    </div>
  );
}

useCallback memoizes a function, ensuring it only changes if its dependencies change.

import React, { useState, useCallback } from "react";

function Parent() {
  const [count, setCount] = useState(0);

  const handleClick = useCallback(() => {
    console.log("Button clicked");
  }, []); // ✅ Memoized, won't recreate

  return (
    <div>
      <button onClick={() => setCount(count + 1)}>Increment {count}</button>
      <Child onClick={handleClick} />
    </div>
  );
}

const Child = React.memo(({ onClick }) => {
  console.log("Child re-rendered");
  return <button onClick={onClick}>Child Button</button>;
});

export default Parent;


// useReducer Example with Payload
const initialState = { count: 0, name: 'counter' };

function reducer(state, action) {
  switch (action.type) {
    case 'increment':
      return {
        ...state,              // Spread to keep other properties
        count: state.count + action.payload
      };
    case 'decrement':
      return {
        ...state,              // Spread to keep other properties
        count: state.count - action.payload
      };
    default:
      return state;
  }
}

function ReducerExample() {
  const [state, dispatch] = useReducer(reducer, initialState);

  return (
    <div>
      <h1>useReducer with Payload</h1>
      <p>Count: {state.count}</p>
      <button onClick={() => dispatch({ type: 'increment', payload: 5 })}>Increment by 5</button>
      <button onClick={() => dispatch({ type: 'decrement', payload: 3 })}>Decrement by 3</button>
    </div>
  );
}
export default Counter;

useRef provides a mutable reference that persists across renders. It can access DOM elements or store values.
 
import React, { useRef } from 'react';

function FocusInput() {
  const inputRef = useRef(null);
  const prevCountRef = useRef();

const [count, setCount] = useState(0);

  const focusInput = () => {
    inputRef.current.focus();
  };

React.useEffect(() => {
    prevCountRef.current = count;
  }, [count]);

  const prevCount = prevCountRef.current;

  return (
    <div>
      <input ref={inputRef} type="text" />
      <button onClick={focusInput}>Focus Input</button>
  <h1>useRef with Previous Value</h1>
      <p>Current Count: {count}</p>
      <p>Previous Count: {prevCount}</p>
      <button onClick={() => setCount(count + 1)}>Increment</button>
    </div>
  );
}

export default FocusInput;
 


// useContext Example with Increment
const CountContext = createContext();

function ContextProvider({ children }) {
  const [count, setCount] = useState(0);

  const increment = () => setCount(count + 1);

  return (
    <CountContext.Provider value={{ count, increment }}>
      {children}
    </CountContext.Provider>
  );
}

function ContextConsumer() {
  const { count, increment } = useContext(CountContext);

  return (
    <div>
      <h1>useContext Example</h1>
      <p>Count: {count}</p>
      <button onClick={increment}>Increment</button>
    </div>
  );
}


import React, { createContext, useContext, useState } from 'react';

// Create Theme Context
const ThemeContext = createContext();

// Theme Provider Component
export const ThemeProvider = ({ children }) => {
  const [theme, setTheme] = useState('light');

  const toggleTheme = () => {
    setTheme(prevTheme => prevTheme === 'light' ? 'dark' : 'light');
  };

  const themeStyles = {
    light: {
      backgroundColor: '#ffffff',
      color: '#333333'
    },
    dark: {
      backgroundColor: '#333333',
      color: '#ffffff'
    }
  };

  return (
    <ThemeContext.Provider value={{ theme, toggleTheme }}>
      <div className="min-h-screen p-4" style={themeStyles[theme]}>
        {children}
      </div>
    </ThemeContext.Provider>
  );
};

// HOC Example with Common Logic
function withCounter(WrappedComponent) {
  return function EnhancedComponent(props) {
    const [count, setCount] = useState(0);

    const increment = () => setCount(count + 1);

    return <WrappedComponent count={count} increment={increment} {...props} />;
  };
}

function Counter1({ count, increment }) {
  return (
    <div>
      <h1>Counter 1</h1>
      <p>Count: {count}</p>
      <button onClick={increment}>Increment</button>
    </div>
  );
}

function Counter2({ count, increment }) {
  return (
    <div>
      <h1>Counter 2</h1>
      <p>Count: {count}</p>
      <button onClick={increment}>Increment</button>
    </div>
  );
}

const EnhancedCounter1 = withCounter(Counter1);
const EnhancedCounter2 = withCounter(Counter2);

Custom Hooks

 
function useCounter(initialValue) {
  const [count, setCount] = React.useState(initialValue);

  const increment = () => setCount(prevCount => prevCount + 1);
  const decrement = () => setCount(prevCount => prevCount - 1);

  return { count, increment, decrement };
}

function CounterComponent() {
  const { count, increment, decrement } = useCounter(0);

  return (
    <div>
      <p>Count: {count}</p>
      <button onClick={increment}>Increment</button>
      <button onClick={decrement}>Decrement</button>
    </div>
  );
}
 
//useDebounced
import React, { useState } from 'react';

function DebouncedInput() {
  const [inputValue, setInputValue] = useState('');
  const [debouncedValue] = useDebounce(inputValue, 300);

  return (
    <div>
      <input
        type="text"
        value={inputValue}
        onChange={(e) => setInputValue(e.target.value)}
        placeholder="Search..."
      />
      <p>Debounced Value: {debouncedValue}</p>
    </div>
  );
}

// Custom hook: useDebounce
function useDebounce(value, delay) {
  const [debouncedValue, setDebouncedValue] = React.useState(value);

  React.useEffect(() => {
    const handler = setTimeout(() => setDebouncedValue(value), delay);

    return () => clearTimeout(handler);
  }, [value, delay]);

  return [debouncedValue];
}

export default DebouncedInput;

//2nd
import React, { useState, useCallback } from 'react';
import axios from 'axios';

function SearchWithDebounce() {
  const [query, setQuery] = useState('');
  const [results, setResults] = useState([]);
  const [debouncedQuery] = useDebounce(query, 300); // Debounce query with 300ms delay

  const fetchResults = useCallback(async () => {
    if (debouncedQuery) {
      try {
        const response = await axios.get(`https://jsonplaceholder.typicode.com/users?name_like=${debouncedQuery}`);
        setResults(response.data);
      } catch (error) {
        console.error("Error fetching data", error);
      }
    }
  }, [debouncedQuery]);

  React.useEffect(() => {
    fetchResults();
  }, [debouncedQuery]);

  return (
    <div>
      <input
        type="text"
        value={query}
        onChange={(e) => setQuery(e.target.value)}
        placeholder="Search users..."
      />
      <ul>
        {results.map((user) => (
          <li key={user.id}>{user.name}</li>
        ))}
      </ul>
    </div>
  );
}

// Custom hook: useDebounce
function useDebounce(value, delay) {
  const [debouncedValue, setDebouncedValue] = React.useState(value);

  React.useEffect(() => {
    const handler = setTimeout(() => setDebouncedValue(value), delay);

    return () => clearTimeout(handler);
  }, [value, delay]);

  return [debouncedValue];
}

export default SearchWithDebounce;

import { useState, useEffect } from 'react';

function useFetch(url) {
  const [data, setData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    async function fetchData() {
      try {
        const response = await fetch(url);
        if (!response.ok) {
          throw new Error(`Error: ${response.statusText}`);
        }
        const result = await response.json();
        setData(result);
      } catch (err) {
        setError(err.message);
      } finally {
        setLoading(false);
      }
    }
    fetchData();
  }, [url]);

  return { data, loading, error };
}

 
Passing Data from Child to Parent
import React, { useState } from 'react';

function ParentComponent() {
  const [childData, setChildData] = useState('');

  const handleChildData = (data) => {
    setChildData(data);  // Update the parent's state with data from child
  };

  return (
    <div>
      <h1>Parent Component</h1>
      <ChildComponent sendData={handleChildData} />
      <p>Data from Child: {childData}</p>
    </div>
  );
}

export default ParentComponent;

function ChildComponent({ sendData }) {
  const handleButtonClick = () => {
    const dataToSend = 'Hello from Child Component!';
    sendData(dataToSend);  // Passing data back to the parent
  };

  return (
    <div>
      <h2>Child Component</h2>
      <button onClick={handleButtonClick}>Send Data to Parent</button>
    </div>
  );
}

 

import { createBrowserRouter, RouterProvider } from 'react-router-dom';

// Sample components createBrowserRouter:
function Home() {
  return <h1>Home Page</h1>;
}

function About() {
  return <h1>About Page</h1>;
}

function UserProfile() {
  const [searchParams] = useSearchParams();
  const userId = useParams().id;

  return (
    <div>
      <h1>User Profile</h1>
      <p>Showing profile of User ID: {userId}</p>
     
 <p>Query Param (search): {searchParams.get('info')}</p>
    </div>
  );
}

const router = createBrowserRouter([
  {
    path: '/',
    element: <Home />,
  },
  {
    path: '/about',
    element: <About />,
  },
  {
    path: '/user/:id',
    element: <UserProfile />,
  },
{ path: '*', // Catch-all route for 404 element:
<ErrorComponent />, // Display custom error page }
]);

export default function App() {
  return <RouterProvider router={router} />;
}
 

Using useSearchParams and useParams:
useSearchParams: Used for handling query parameters (e.g., ?info=value).
useParams: Used for route parameters (e.g., /:id).
•  useSearchParams: Allows handling URL search parameters such as ?info=value. This is useful for filtering or sorting data dynamically.
•  useParams: Provides access to route parameters passed in the URL. For instance, /user/:id captures the dynamic id parameter.



 
//nested route
import React from 'react';
import { createBrowserRouter, RouterProvider, Route, Outlet } from 'react-router-dom';

function Parent() {
  return (
    <div>
      <h1>Parent Page</h1>
      <Outlet />  {/* Outlet renders child routes */}
    </div>
  );
}

function Child() {
  return <h2>Child Page</h2>;
}

const router = createBrowserRouter([
  {
    path: '/',
    element: <Parent />,
    children: [
      {
        path: 'child',
        element: <Child />,
      },
    ],
  }
]);

export default function App() {
  return <RouterProvider router={router} />;
}
 

Example: Counter with Redux Toolkit
npm install @reduxjs/toolkit react-redux
2. Creating a Counter Slice
Create a slice using Redux Toolkit’s createSlice:
// counterSlice.js
import { createSlice } from '@reduxjs/toolkit';

const initialState = { value: 0 };

const counterSlice = createSlice({
  name: 'counter',
  initialState,
  reducers: {
    increment: (state) => {
      state.value += 1;
    },
    decrement: (state) => {
      state.value -= 1;
    },
    incrementByAmount: (state, action) => {
      state.value += action.payload;
    },
  },
});

export const { increment, decrement, incrementByAmount } = counterSlice.actions;
export default counterSlice.reducer;

3. Configuring Redux Store
// store.js
import { configureStore } from '@reduxjs/toolkit';
import counterReducer from './counterSlice';

export const store = configureStore({
  reducer: {
    counter: counterReducer,
  },
});
4. Using Redux Toolkit in React Component

// Counter.js
import React from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { increment, decrement, incrementByAmount } from './counterSlice';

function Counter() {
  const count = useSelector((state) => state.counter.value);
  const dispatch = useDispatch();

  return (
    <div>
      <h1>Counter: {count}</h1>
      <button onClick={() => dispatch(increment())}>Increment</button>
      <button onClick={() => dispatch(decrement())}>Decrement</button>
      <button onClick={() => dispatch(incrementByAmount(5))}>Increment by 5</button>
    </div>
  );
}

export default Counter;

<Provider store={store}> 
<Counter />
 </Provider>

Scenario: Failing to Fetch Data After Component Mount

import React, { useState, useEffect } from 'react';

function FetchWithRetry() {
  const [data, setData] = useState(null);
  const [error, setError] = useState('');

  const fetchData = async (retryCount = 3) => {
    try {
      const response = await fetch('https://api.example.com/data');
      if (!response.ok) throw new Error('Failed to fetch data');
      const result = await response.json();
      setData(result);
    } catch (err) {
      if (retryCount > 0) {
        setTimeout(() => fetchData(retryCount - 1), 1000);
      } else {
        setError('Unable to fetch data after retries.');
      }
    }
  };

  useEffect(() => {
    fetchData();
  }, []);

  if (error) return <p>Error: {error}</p>;
  if (!data) return <p>Loading...</p>;

  return <div>Data: {JSON.stringify(data)}</div>;
}
Code Splitting and Lazy Loading
const HeavyComponent = React.lazy(() => import('./HeavyComponent'));

function App() {
  return (
    <React.Suspense fallback={<p>Loading...</p>}>
      <HeavyComponent />
    </React.Suspense>
  );
 
}

 


function App() {
  const [items, setItems] = useState([]); // State for storing items
  const [input, setInput] = useState(""); // State for input value
  const [isEdit, setIsEdit] = useState(false); // Toggle between add/edit
  const [editId, setEditId] = useState(null); // Track which item is being edited

  // Add or Edit Item
  const handleAddEdit = () => {
    if (isEdit) {
      // Edit existing item
      setItems((prevItems) =>
        prevItems.map((item) =>
          item.id === editId ? { ...item, text: input } : item
        )
      );
      setIsEdit(false); // Reset edit mode
      setEditId(null); // Reset edit ID
    } else {
      // Add new item
      setItems([...items, { id: Date.now(), text: input, isComplete: false }]);
    }
    setInput(""); // Clear input field
  };

  // Toggle completion status
  const toggleComplete = (id) => {
    setItems((prevItems) =>
      prevItems.map((item) =>
        item.id === id ? { ...item, isComplete: !item.isComplete } : item
      )
    );
  };

  // Enable edit mode
  const handleEdit = (id, text) => {
    setInput(text); // Populate input field with item text
    setIsEdit(true); // Switch to edit mode
    setEditId(id); // Set the current edit ID
  };

  // Delete an item
  const handleDelete = (id) => {
    setItems((prevItems) => prevItems.filter((item) => item.id !== id));
  };

  return (
    <div style={{ padding: "20px" }}>
      <h1>React CRUD App</h1>
      <div>
        <input
          type="text"
          value={input}
          onChange={(e) => setInput(e.target.value)}
          placeholder={isEdit ? "Edit item" : "Add item"}
        />
        <button onClick={handleAddEdit}>{isEdit ? "Update" : "Add"}</button>
      </div>
      <ul>
        {items.map((item) => (
          <li
            key={item.id}
            style={{
              textDecoration: item.isComplete ? "line-through" : "none",
              display: "flex",
              alignItems: "center",
              justifyContent: "space-between",
            }}
          >
            <span>{item.text}</span>
            <div>
              <input
                type="checkbox"
                checked={item.isComplete}
                onChange={() => toggleComplete(item.id)}
              />
              <button onClick={() => handleEdit(item.id, item.text)}>Edit</button>
              <button onClick={() => handleDelete(item.id)}>Delete</button>
            </div>
          </li>
        ))}
      </ul>
    </div>
  );
}

export default App;




const PokemonFetcher = () => {
  const [pokemonList, setPokemonList] = useState([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    // Function to fetch data from the Pokémon API
    const fetchPokemonData = async () => {
      try {
        // Step 1: Fetch the initial Pokémon list
        const initialResponse = await fetch("https://pokeapi.co/api/v2/pokemon?limit=10");
        const initialData = await initialResponse.json();

        // Step 2: Extract URLs for each Pokémon
        const pokemonUrls = initialData.results.map((pokemon) => pokemon.url);

        // Step 3: Use Promise.all to fetch data for each Pokémon
        const pokemonDetails = await Promise.all(
          pokemonUrls.map(async (url) => {
            const response = await fetch(url);
            return response.json();
          })
        );

        // Update state with fetched Pokémon details
        setPokemonList(pokemonDetails);
        setLoading(false);
      } catch (error) {
        console.error("Error fetching Pokémon data:", error);
        setLoading(false);
      }
    };

    fetchPokemonData();
  }, []);

  if (loading) return <div>Loading...</div>;

  return (
    <div>
      <h1>Pokémon List</h1>
      <ul>
        {pokemonList.map((pokemon) => (
          <li key={pokemon.id}>
            <h2>{pokemon.name}</h2>
            <p>Height: {pokemon.height}</p>
            <p>Weight: {pokemon.weight}</p>
          </li>
        ))}
      </ul>
    </div>
  );
};

export default PokemonFetcher;



import React, { useState, useRef, useEffect } from "react";

const Stopwatch = () => {
  const [time, setTime] = useState(0); // Tracks elapsed time in seconds
  const [isRunning, setIsRunning] = useState(false); // Tracks if stopwatch is running
  const intervalRef = useRef(null); // Stores the interval ID

  useEffect(() => {
    if (isRunning) {
      // Start the interval when the stopwatch is running
      intervalRef.current = setInterval(() => {
        setTime((prevTime) => prevTime + 1);

/*  setTime((prevTime) => {// code for 60 seconds
          if (prevTime > 0) {
            return prevTime - 1;
          } else {
            clearInterval(intervalRef.current);
            return 0;
          }
        }); */

      }, 1000);
    } else {
      // Clear the interval when paused or stopped
      clearInterval(intervalRef.current);
    }

    // Cleanup the interval when the component unmounts or when `isRunning` changes
    return () => clearInterval(intervalRef.current);
  }, [isRunning]);

  const handleStart = () => setIsRunning(true);

  const handlePauseResume = () => setIsRunning((prev) => !prev);

  const handleReset = () => {
    setIsRunning(false);
    setTime(0);
//setTime(60); // Reset back to 60 seconds
    clearInterval(intervalRef.current);
  };

  const formatTime = (time) => {
    const hours = Math.floor(time / 3600);
    const minutes = Math.floor((time % 3600) / 60);
    const seconds = time % 60;
    return `${hours.toString().padStart(2, "0")}:${minutes
      .toString()
      .padStart(2, "0")}:${seconds.toString().padStart(2, "0")}`;
  };

  return (
    <div>
      <h1>Stopwatch</h1>
      <h2>{formatTime(time)}</h2>
      <button onClick={handleStart} disabled={isRunning}>Start</button>
      <button onClick={handlePauseResume}>{isRunning ? "Pause" : "Resume"}</button>
      <button onClick={handleReset}>Reset</button>
    </div>
  );
};

export default Stopwatch;


export default function FileExplorer({ folderData }) {
  const [showChildren, setShowChildren] = useState(false);

  const handleClick = () => {
    setShowChildren(!showChildren);
  };

  return (
    <div className="container">
      <h5>
        {folderData.type === "folder" ? (showChildren ? "📂" : "📁") : "📄"}
        <span onClick={handleClick}>{folderData.name}</span>
      </h5>
      {showChildren &&
        folderData?.children?.map((childData, index) => {
          return <FileExplorer key={index} folderData={childData} />;
        })}
    </div>
  );
}
{
  "name": "File Explorer",
  "type": "folder",
  "children": [
    {
      "name": "node_modules",
      "type": "folder",
      "children": []
    },
    {
      "name": "public",
      "type": "folder",
      "children": [
        {
          "name": "index.html",
          "type": "file"
        },
        {
          "name": "favicon.ico",
          "type": "file"
        },
]}






 
const FormValidation = () => {
  const [formData, setFormData] = useState({
    firstName: "",
    lastName: "",
    email: "",
  });

  const [errors, setErrors] = useState({});

  const validate = () => {
    const newErrors = {};

    // Validate first name
    if (!formData.firstName.trim()) {
      newErrors.firstName = "First name is required.";
    }

    // Validate last name
    if (!formData.lastName.trim()) {
      newErrors.lastName = "Last name is required.";
    }

    // Validate email
    const emailRegex = /^[\\w-.]+@[\\w-]+\\.[a-z]{2,4}$/i;
    if (!formData.email.trim()) {
      newErrors.email = "Email is required.";
    } else if (!emailRegex.test(formData.email)) {
      newErrors.email = "Invalid email address.";
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0; // No errors mean the form is valid
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    if (validate()) {
      alert("Form submitted successfully!");
      // You can proceed with further actions like API calls here
    }
  };

  const handleChange = (e) => {
    setFormData({
      ...formData,
      [e.target.name]: e.target.value,
    });
  };
 

 
  return (
    <form onSubmit={handleSubmit} noValidate>
      <div>
        <label>First Name</label>
        <input
          type="text"
          name="firstName"
          value={formData.firstName}
          onChange={handleChange}
        />
        {errors.firstName && <p style={{ color: "red" }}>{errors.firstName}</p>}
      </div>
      <div>
        <label>Last Name</label>
        <input
          type="text"
          name="lastName"
          value={formData.lastName}
          onChange={handleChange}
        />
        {errors.lastName && <p style={{ color: "red" }}>{errors.lastName}</p>}
      </div>
      <div>
        <label>Email</label>
        <input
          type="email"
          name="email"
          value={formData.email}
          onChange={handleChange}
        />
        {errors.email && <p style={{ color: "red" }}>{errors.email}</p>}
      </div>
      <button type="submit">Submit</button>
    </form>
  );
};
 

export default FormValidation;

import React, { useState } from "react";

const Accordion = ({ data }) => {
  const [activeIndex, setActiveIndex] = useState(null);

  const toggleAccordion = (index) => {
    setActiveIndex(index === activeIndex ? null : index);
  };

  return (
    <div>
      {data.map((item, index) => (
        <div key={index}>
          <div
            style={{ fontWeight: "bold", cursor: "pointer" }}
            onClick={() => toggleAccordion(index)}
          >
            {item.title}
          </div>
          {activeIndex === index && <div>{item.content}</div>}
        </div>
      ))}
    </div>
  );
};

export default Accordion;

// Example usage:
// const data = [
//   { title: "Section 1", content: "Content 1" },
//   { title: "Section 2", content: "Content 2" },
//   { title: "Section 3", content: "Content 3" },
// ];
// <Accordion data={data} />
import React, { useState } from "react";

const SearchBar = () => {
  const [query, setQuery] = useState("");
  const items = ["React", "JavaScript", "Node", "CSS", "HTML", "Redux"];

  const filteredItems = items.filter((item) =>
    item.toLowerCase().includes(query.toLowerCase())
  );

  return (
    <div>
      <input
        type="text"
        placeholder="Search..."
        value={query}
        onChange={(e) => setQuery(e.target.value)}
      />
      <ul>
        {filteredItems.map((item, index) => (
          <li key={index}>{item}</li>
        ))}
      </ul>
    </div>
  );
};

export default SearchBar;
import React, { useState } from "react";

const Tabs = ({ tabs }) => {
  const [activeTab, setActiveTab] = useState(0);

  return (
    <div>
      <div style={{ display: "flex", cursor: "pointer" }}>
        {tabs.map((tab, index) => (
          <div
            key={index}
            style={{
              margin: "0 10px",
              borderBottom: activeTab === index ? "2px solid blue" : "none",
            }}
            onClick={() => setActiveTab(index)}
          >
            {tab.label}
          </div>
        ))}
      </div>
      <div style={{ padding: "10px" }}>{tabs[activeTab].content}</div>
    </div>
  );
};

export default Tabs;

// Example Usage:
// const tabs = [
//   { label: "Tab 1", content: "Content 1" },
//   { label: "Tab 2", content: "Content 2" },
//   { label: "Tab 3", content: "Content 3" },
// ];
// <Tabs tabs={tabs} />

import React, { useState } from "react";

const ImageCarousel = ({ images }) => {
  const [currentIndex, setCurrentIndex] = useState(0);

  const nextImage = () => setCurrentIndex((prev) => (prev + 1) % images.length);
  const prevImage = () => setCurrentIndex((prev) => (prev - 1 + images.length) % images.length);

  return (
    <div>
      <button onClick={prevImage}>Prev</button>
      <img src={images[currentIndex]} alt="carousel" style={{ width: "300px", height: "200px" }} />
      <button onClick={nextImage}>Next</button>
    </div>
  );
};

export default ImageCarousel;
// Example usage:
// const images = ["image1.jpg", "image2.jpg", "image3.jpg"];
// <ImageCarousel images={images} />

